/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI149084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI148310 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148309 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI148308 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI148332 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148411 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148031 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI148022 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148059 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148302 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI132878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI132816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI132818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI133020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3844.node = NNI3844;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3844.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
NTI3846.base = NTI3842;
NTI133020.base = NTI112;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
NTI132816.base = NTI132878;
var NNI132818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI132816, name: "nanosecond", sons: null}]};
NTI132818.node = NNI132818;
NTI148070.base = NTI148059;
NTI148302.base = NTI148070;
NTI148022.base = NTI104;
NTI148015.base = NTI148022;
NTI148031.base = NTI104;
NTI148309.base = NTI148310;
NTI148308.base = NTI148309;
NTI148332.base = NTI148308;
NTI148411.base = NTI148332;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
NTI149084.base = NTI104;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function divInt(a_16657, b_16658) {
		    if (b_16658 == 0) raiseDivByZero();
    if (b_16658 == -1 && a_16657 == 2147483647) raiseOverflow();
    return Math.trunc(a_16657 / b_16658);
  

	
}
		var unit_weights_133017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI133020);

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function modInt(a_16675, b_16676) {
		    if (b_16676 == 0) raiseDivByZero();
    if (b_16676 == -1 && a_16675 == 2147483647) raiseOverflow();
    return Math.trunc(a_16675 % b_16676);
  

	
}
var initial_board_148056 = nimCopy(null, [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], NTI148302);

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
		var minos_148305 = nimCopy(null, [[[[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]], [[[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]], [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]]]], NTI148411);

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var state_26605 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_135832 = [null];
var local_instance_135833 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseDivByZero() {
		var e_16095 = null;
		e_16095 = {m_type: NTI3844, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16095.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_16095.parent = null;
		raiseException(e_16095, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function HEX2A_132401(a_132403, b_132404) {
	var result_132405 = 0;

	var F={procname:"times.*",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 139;
		result_132405 = (a_132403 * b_132404);
	framePtr = F.prev;

	return result_132405;

}

function convert_133453(unit_from_133457, unit_to_133459, quantity_133461) {
		var Tmp1;

	var result_133462 = 0;

	var F={procname:"convert.convert",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 326;
		if ((unit_from_133457 < unit_to_133459)) {
		Tmp1 = chckRange(divInt(quantity_133461, divInt(unit_weights_133017[chckIndx(unit_to_133459, 0, unit_weights_133017.length+0-1)-0], unit_weights_133017[chckIndx(unit_from_133457, 0, unit_weights_133017.length+0-1)-0])), -2147483648, 2147483647);
		}
		else {
		Tmp1 = chckRange(HEX2A_132401(divInt(unit_weights_133017[chckIndx(unit_from_133457, 0, unit_weights_133017.length+0-1)-0], unit_weights_133017[chckIndx(unit_to_133459, 0, unit_weights_133017.length+0-1)-0]), quantity_133461), -2147483648, 2147483647);
		}
		
		result_133462 = Tmp1;
	framePtr = F.prev;

	return result_133462;

}

function init_time_133090(unix_133092, nanosecond_133093) {
	var result_135018 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.initTime",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 699;
		result_135018.seconds = unix_133092;
		F.line = 700;
		result_135018.nanosecond = nanosecond_133093;
	framePtr = F.prev;

	return result_135018;

}

function get_time_135961() {
	var result_135963 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.getTime",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 1053;
		var millis_136001 = new Date().getTime();
		F.line = 1054;
		var seconds_136012 = convert_133453(2, 3, millis_136001);
		F.line = 1055;
		var nanos_136034 = convert_133453(2, 0, modInt(millis_136001, convert_133453(3, 2, 1)));
		F.line = 1057;
		nimCopy(result_135963, init_time_133090(seconds_136012, chckRange(nanos_136034, 0, 999999999)), NTI132818);
	framePtr = F.prev;

	return result_135963;

}
var start_145831 = [get_time_135961()];
var currentBoard = nimCopy(null, initial_board_148056, NTI148015);
var displayBoard = nimCopy(null, initial_board_148056, NTI148015);

function fetchBlock(b_148430, x_148431, y_148432) {
	var result_148433 = [new Int32Array(4), new Int32Array(4), new Int32Array(4), new Int32Array(4)];

	var F={procname:"nimtetris.fetchBlock",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 86;
		var i_148434 = 0;
		L1: do {
			F.line = 87;
			var y2_148443 = 0;
			F.line = 3527;
			var colontmp__148480 = 0;
			F.line = 87;
			colontmp__148480 = addInt(y_148432, 4);
			F.line = 3528;
			var i_148483 = y_148432;
			L2: do {
				F.line = 3529;
					L3: while (true) {
					if (!(i_148483 < colontmp__148480)) break L3;
						F.line = 3530;
						y2_148443 = i_148483;
						F.line = 88;
						var j_148444 = 0;
						L4: do {
							F.line = 89;
							var x2_148453 = 0;
							F.line = 3527;
							var colontmp__148475 = 0;
							F.line = 89;
							colontmp__148475 = addInt(x_148431, 4);
							F.line = 3528;
							var i_148478 = x_148431;
							L5: do {
								F.line = 3529;
									L6: while (true) {
									if (!(i_148478 < colontmp__148475)) break L6;
										F.line = 3530;
										x2_148453 = i_148478;
										F.line = 90;
										var cell_148454 = b_148430[chckIndx(y2_148443, 0, b_148430.length+0-1)-0][chckIndx(x2_148453, 0, b_148430[chckIndx(y2_148443, 0, b_148430.length+0-1)-0].length+0-1)-0];
										F.line = 91;
										result_148433[chckIndx(i_148434, 0, result_148433.length+0-1)-0][chckIndx(j_148444, 0, result_148433[chckIndx(i_148434, 0, result_148433.length+0-1)-0].length+0-1)-0] = cell_148454;
										F.line = 92;
										j_148444 = addInt(j_148444, 1);
										F.line = 3531;
										i_148478 = addInt(i_148478, 1);
									}
							} while(false);
						} while(false);
						F.line = 93;
						i_148434 = addInt(i_148434, 1);
						F.line = 3531;
						i_148483 = addInt(i_148483, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_148433;

}

function isOverlap(self_148500, target_148501) {
	var result_148502 = false;

	var F={procname:"nimtetris.isOverlap",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 98;
			var y_148569 = 0;
			F.line = 98;
			var row_148570 = new Int32Array(4);
			F.line = 2247;
			var i_148650 = 0;
			if ((i_148650 <= 3)) {
			L2: do {
				F.line = 2249;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2250;
						y_148569 = i_148650;
						F.line = 2250;
						nimCopy(row_148570, self_148500[chckIndx(i_148650, 0, self_148500.length+0-1)-0], NTI148031);
						L4: do {
							F.line = 99;
							var x_148637 = 0;
							F.line = 99;
							var cell_148638 = 0;
							F.line = 2247;
							var i_148647 = 0;
							if ((i_148647 <= 3)) {
							L5: do {
								F.line = 2249;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2250;
										x_148637 = i_148647;
										F.line = 2250;
										cell_148638 = row_148570[chckIndx(i_148647, 0, row_148570.length+0-1)-0];
										F.line = 100;
										var target_cell_148639 = target_148501[chckIndx(y_148569, 0, target_148501.length+0-1)-0][chckIndx(x_148637, 0, target_148501[chckIndx(y_148569, 0, target_148501.length+0-1)-0].length+0-1)-0];
										F.line = 101;
										var overlap_148640 = addInt(cell_148638, target_cell_148639);
										if ((1 < overlap_148640)) {
										F.line = 103;
										result_148502 = true;
										break BeforeRet;
										}
										
										if ((3 <= i_148647)) {
										F.line = 2251;
										break L5;
										}
										
										F.line = 2252;
										i_148647 = addInt(i_148647, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((3 <= i_148650)) {
						F.line = 2251;
						break L2;
						}
						
						F.line = 2252;
						i_148650 = addInt(i_148650, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 104;
		result_148502 = false;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_148502;

}

function getBlock(m_148666) {
	var result_148667 = [new Int32Array(4), new Int32Array(4), new Int32Array(4), new Int32Array(4)];

	var F={procname:"nimtetris.getBlock",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 107;
		nimCopy(result_148667, minos_148305[chckIndx(m_148666.minoIndex, 0, minos_148305.length+0-1)-0][chckIndx(m_148666.rotateIndex, 0, minos_148305[chckIndx(m_148666.minoIndex, 0, minos_148305.length+0-1)-0].length+0-1)-0], NTI148308);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_148667;

}

function canMoveRight(m_148683, b_148684) {
	var result_148685 = false;

	var F={procname:"nimtetris.canMoveRight",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((b_148684[chckIndx(0, 0, b_148684.length+0-1)-0] != null ? b_148684[chckIndx(0, 0, b_148684.length+0-1)-0].length : 0) < addInt(addInt(m_148683.x, 1), 4))) {
		F.line = 111;
		result_148685 = false;
		break BeforeRet;
		}
		
		F.line = 112;
		var blk_148693 = fetchBlock(b_148684, addInt(m_148683.x, 1), m_148683.y);
		F.line = 113;
		result_148685 = !(isOverlap(getBlock(m_148683), blk_148693));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_148685;

}

function canMoveLeft(m_148709, b_148710) {
	var result_148711 = false;

	var F={procname:"nimtetris.canMoveLeft",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((subInt(m_148709.x, 1) < 0)) {
		F.line = 117;
		result_148711 = false;
		break BeforeRet;
		}
		
		F.line = 118;
		var blk_148712 = fetchBlock(b_148710, subInt(m_148709.x, 1), m_148709.y);
		F.line = 119;
		result_148711 = !(isOverlap(getBlock(m_148709), blk_148712));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_148711;

}

function canMoveDown(m_148728, b_148729) {
	var result_148730 = false;

	var F={procname:"nimtetris.canMoveDown",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((b_148729 != null ? b_148729.length : 0) < addInt(addInt(m_148728.y, 1), 4))) {
		F.line = 123;
		result_148730 = false;
		break BeforeRet;
		}
		
		F.line = 124;
		var blk_148738 = fetchBlock(b_148729, m_148728.x, addInt(m_148728.y, 1));
		F.line = 125;
		result_148730 = !(isOverlap(getBlock(m_148728), blk_148738));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_148730;

}

function moveRight(m_148754) {
	var F={procname:"nimtetris.moveRight",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 127;
		m_148754.x = addInt(m_148754.x, 1);
	framePtr = F.prev;

	
}

function moveLeft(m_148779) {
	var F={procname:"nimtetris.moveLeft",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 128;
		m_148779.x = subInt(m_148779.x, 1);
	framePtr = F.prev;

	
}

function moveDown(m_148804) {
	var F={procname:"nimtetris.moveDown",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 129;
		m_148804.y = addInt(m_148804.y, 1);
	framePtr = F.prev;

	
}

function rotateRight(m_148830, m_148830_Idx) {
		var Tmp1;

	var F={procname:"nimtetris.rotateRight",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 132;
		var inced_index_148831 = addInt(m_148830[m_148830_Idx].rotateIndex, 1);
		F.line = 133;
		if (((minos_148305[chckIndx(m_148830[m_148830_Idx].minoIndex, 0, minos_148305.length+0-1)-0] != null ? minos_148305[chckIndx(m_148830[m_148830_Idx].minoIndex, 0, minos_148305.length+0-1)-0].length : 0) <= inced_index_148831)) {
		Tmp1 = 0;
		}
		else {
		Tmp1 = inced_index_148831;
		}
		
		m_148830[m_148830_Idx].rotateIndex = Tmp1;
	framePtr = F.prev;

	
}

function rotateLeft(m_148855, m_148855_Idx) {
		var Tmp1;

	var F={procname:"nimtetris.rotateLeft",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 139;
		var deced_index_148856 = subInt(m_148855[m_148855_Idx].rotateIndex, 1);
		F.line = 140;
		if ((deced_index_148856 < 0)) {
		Tmp1 = subInt((minos_148305[chckIndx(m_148855[m_148855_Idx].minoIndex, 0, minos_148305.length+0-1)-0] != null ? minos_148305[chckIndx(m_148855[m_148855_Idx].minoIndex, 0, minos_148305.length+0-1)-0].length : 0), 1);
		}
		else {
		Tmp1 = deced_index_148856;
		}
		
		m_148855[m_148855_Idx].rotateIndex = Tmp1;
	framePtr = F.prev;

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2827;
		var e_20445 = null;
		F.line = 2828;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2829;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2830;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3783;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3790;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function isDeletable(row_148880) {
	var result_148881 = false;

	var F={procname:"nimtetris.isDeletable",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 146;
			var c_149015 = 0;
			F.line = 3822;
			var i_149019 = 0;
			F.line = 3823;
			var l_149021 = (row_148880 != null ? row_148880.length : 0);
			L2: do {
				F.line = 3824;
					L3: while (true) {
					if (!(i_149019 < l_149021)) break L3;
						F.line = 3825;
						c_149015 = row_148880[chckIndx(i_149019, 0, row_148880.length+0-1)-0];
						if ((c_149015 <= 0)) {
						F.line = 148;
						result_148881 = false;
						break BeforeRet;
						}
						
						F.line = 3826;
						i_149019 = addInt(i_149019, 1);
						if (!(((row_148880 != null ? row_148880.length : 0) == l_149021))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.19.0/lib/system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 149;
		result_148881 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_148881;

}

function HEX5BHEX5D_149073(s_149080, x_149083) {
	var result_149085 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3617;
		var a_149201 = x_149083.a;
		F.line = 3618;
		var l_149401 = addInt(subInt(x_149083.b, a_149201), 1);
		F.line = 3619;
		result_149085 = new Array(chckRange(l_149401, 0, 2147483647)); for (var i=0;i<chckRange(l_149401, 0, 2147483647);++i) {result_149085[i]=0;}		L1: do {
			F.line = 3620;
			var i_149421 = 0;
			F.line = 3528;
			var i_149429 = 0;
			L2: do {
				F.line = 3529;
					L3: while (true) {
					if (!(i_149429 < l_149401)) break L3;
						F.line = 3530;
						i_149421 = i_149429;
						F.line = 3620;
						result_149085[chckIndx(i_149421, 0, result_149085.length+0-1)-0] = s_149080[chckIndx(addInt(i_149421, a_149201), 0, s_149080.length+0-1)-0];
						F.line = 3531;
						i_149429 = addInt(i_149429, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_149085;

}

function HEX2EHEX2E_47828(a_47833, b_47835) {
	var result_47837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 341;
		result_47837.a = a_47833;
		F.line = 342;
		result_47837.b = b_47835;
	framePtr = F.prev;

	return result_47837;

}

function fetchRow(mb_149037, n_149038) {
	var result_149040 = null;

	var F={procname:"nimtetris.fetchRow",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 152;
		var row_149041 = nimCopy(null, mb_149037.board[chckIndx(n_149038, 0, mb_149037.board.length+0-1)-0], NTI148022);
		F.line = 153;
		result_149040 = nimCopy(null, HEX5BHEX5D_149073(row_149041, HEX2EHEX2E_47828(mb_149037.offset, subInt(subInt((row_149041 != null ? row_149041.length : 0), 1), mb_149037.offset))), NTI149084);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_149040;

}

function setMino(b_149460, b_149460_Idx, m_149461) {
	var F={procname:"nimtetris.setMino",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 156;
		var blk_149462 = getBlock(m_149461);
		L1: do {
			F.line = 157;
			var y_149477 = 0;
			F.line = 157;
			var row_149478 = new Int32Array(4);
			F.line = 2247;
			var i_149502 = 0;
			if ((i_149502 <= 3)) {
			L2: do {
				F.line = 2249;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2250;
						y_149477 = i_149502;
						F.line = 2250;
						nimCopy(row_149478, blk_149462[chckIndx(i_149502, 0, blk_149462.length+0-1)-0], NTI148031);
						L4: do {
							F.line = 158;
							var x_149493 = 0;
							F.line = 158;
							var cell_149494 = 0;
							F.line = 2247;
							var i_149499 = 0;
							if ((i_149499 <= 3)) {
							L5: do {
								F.line = 2249;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2250;
										x_149493 = i_149499;
										F.line = 2250;
										cell_149494 = row_149478[chckIndx(i_149499, 0, row_149478.length+0-1)-0];
										if (!((cell_149494 == 0))) {
										F.line = 161;
										b_149460[b_149460_Idx][chckIndx(addInt(y_149477, m_149461.y), 0, b_149460[b_149460_Idx].length+0-1)-0][chckIndx(addInt(x_149493, m_149461.x), 0, b_149460[b_149460_Idx][chckIndx(addInt(y_149477, m_149461.y), 0, b_149460[b_149460_Idx].length+0-1)-0].length+0-1)-0] = cell_149494;
										}
										
										if ((3 <= i_149499)) {
										F.line = 2251;
										break L5;
										}
										
										F.line = 2252;
										i_149499 = addInt(i_149499, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((3 <= i_149502)) {
						F.line = 2251;
						break L2;
						}
						
						F.line = 2252;
						i_149502 = addInt(i_149502, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function updateDisplayBoard(m_149518) {
	var F={procname:"nimtetris.updateDisplayBoard",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 165;
		displayBoard = nimCopy(null, currentBoard, NTI148015);
		F.line = 166;
		setMino(displayBoard, 0, m_149518);
	framePtr = F.prev;

	
}

function updateCurrentBoard(m_149535) {
	var F={procname:"nimtetris.updateCurrentBoard",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
		F.line = 170;
		setMino(currentBoard, 0, m_149535);
		F.line = 171;
		displayBoard = nimCopy(null, currentBoard, NTI148015);
	framePtr = F.prev;

	
}

function newRandomMino() {
	var result_149552 = null;

	var F={procname:"nimtetris.newRandomMino",prev:framePtr,filename:"nimtetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 174;
		var r_149554 = 0;
		F.line = 176;
		result_149552 = {minoIndex: r_149554, x: 4, y: 0, rotateIndex: 0};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_149552;

}
